// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/test/v1/ping.proto

package testv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetMessage()); l < 1 || l > 10 {
		err := PingRequestValidationError{
			field:  "Message",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on FailRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FailRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FailRequestMultiError, or
// nil if none found.
func (m *FailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return FailRequestMultiError(errors)
	}

	return nil
}

// FailRequestMultiError is an error wrapping multiple validation errors
// returned by FailRequest.ValidateAll() if the designated constraints aren't met.
type FailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FailRequestMultiError) AllErrors() []error { return m }

// FailRequestValidationError is the validation error returned by
// FailRequest.Validate if the designated constraints aren't met.
type FailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailRequestValidationError) ErrorName() string { return "FailRequestValidationError" }

// Error satisfies the builtin error interface
func (e FailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailRequestValidationError{}

// Validate checks the field values on FailResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FailResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FailResponseMultiError, or
// nil if none found.
func (m *FailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FailResponseMultiError(errors)
	}

	return nil
}

// FailResponseMultiError is an error wrapping multiple validation errors
// returned by FailResponse.ValidateAll() if the designated constraints aren't met.
type FailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FailResponseMultiError) AllErrors() []error { return m }

// FailResponseValidationError is the validation error returned by
// FailResponse.Validate if the designated constraints aren't met.
type FailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailResponseValidationError) ErrorName() string { return "FailResponseValidationError" }

// Error satisfies the builtin error interface
func (e FailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailResponseValidationError{}

// Validate checks the field values on PingStreamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PingStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PingStreamRequestMultiError, or nil if none found.
func (m *PingStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetMessage()); l < 1 || l > 10 {
		err := PingStreamRequestValidationError{
			field:  "Message",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PingStreamRequestMultiError(errors)
	}

	return nil
}

// PingStreamRequestMultiError is an error wrapping multiple validation errors
// returned by PingStreamRequest.ValidateAll() if the designated constraints
// aren't met.
type PingStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingStreamRequestMultiError) AllErrors() []error { return m }

// PingStreamRequestValidationError is the validation error returned by
// PingStreamRequest.Validate if the designated constraints aren't met.
type PingStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingStreamRequestValidationError) ErrorName() string {
	return "PingStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PingStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingStreamRequestValidationError{}

// Validate checks the field values on PingStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PingStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PingStreamResponseMultiError, or nil if none found.
func (m *PingStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingStreamResponseMultiError(errors)
	}

	return nil
}

// PingStreamResponseMultiError is an error wrapping multiple validation errors
// returned by PingStreamResponse.ValidateAll() if the designated constraints
// aren't met.
type PingStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingStreamResponseMultiError) AllErrors() []error { return m }

// PingStreamResponseValidationError is the validation error returned by
// PingStreamResponse.Validate if the designated constraints aren't met.
type PingStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingStreamResponseValidationError) ErrorName() string {
	return "PingStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PingStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingStreamResponseValidationError{}
