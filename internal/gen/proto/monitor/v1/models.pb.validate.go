// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/monitor/v1/models.proto

package monitorv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Monitor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Monitor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Monitor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MonitorMultiError, or nil if none found.
func (m *Monitor) ValidateAll() error {
	return m.validate(true)
}

func (m *Monitor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for Interval

	// no validation rules for Protocol

	if all {
		switch v := interface{}(m.GetProtocolConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonitorValidationError{
					field:  "ProtocolConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonitorValidationError{
					field:  "ProtocolConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProtocolConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonitorValidationError{
				field:  "ProtocolConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return MonitorMultiError(errors)
	}

	return nil
}

// MonitorMultiError is an error wrapping multiple validation errors returned
// by Monitor.ValidateAll() if the designated constraints aren't met.
type MonitorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonitorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonitorMultiError) AllErrors() []error { return m }

// MonitorValidationError is the validation error returned by Monitor.Validate
// if the designated constraints aren't met.
type MonitorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorValidationError) ErrorName() string { return "MonitorValidationError" }

// Error satisfies the builtin error interface
func (e MonitorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorValidationError{}

// Validate checks the field values on ProtocolConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProtocolConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtocolConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProtocolConfigMultiError,
// or nil if none found.
func (m *ProtocolConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtocolConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Protocol.(type) {
	case *ProtocolConfig_Http:
		if v == nil {
			err := ProtocolConfigValidationError{
				field:  "Protocol",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHttp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtocolConfigValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtocolConfigValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtocolConfigValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProtocolConfig_Icmp:
		if v == nil {
			err := ProtocolConfigValidationError{
				field:  "Protocol",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIcmp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtocolConfigValidationError{
						field:  "Icmp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtocolConfigValidationError{
						field:  "Icmp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIcmp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtocolConfigValidationError{
					field:  "Icmp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProtocolConfig_Port:
		if v == nil {
			err := ProtocolConfigValidationError{
				field:  "Protocol",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtocolConfigValidationError{
						field:  "Port",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtocolConfigValidationError{
						field:  "Port",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtocolConfigValidationError{
					field:  "Port",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProtocolConfig_BrowserAutomation:
		if v == nil {
			err := ProtocolConfigValidationError{
				field:  "Protocol",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBrowserAutomation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProtocolConfigValidationError{
						field:  "BrowserAutomation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProtocolConfigValidationError{
						field:  "BrowserAutomation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBrowserAutomation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtocolConfigValidationError{
					field:  "BrowserAutomation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ProtocolConfigMultiError(errors)
	}

	return nil
}

// ProtocolConfigMultiError is an error wrapping multiple validation errors
// returned by ProtocolConfig.ValidateAll() if the designated constraints
// aren't met.
type ProtocolConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtocolConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtocolConfigMultiError) AllErrors() []error { return m }

// ProtocolConfigValidationError is the validation error returned by
// ProtocolConfig.Validate if the designated constraints aren't met.
type ProtocolConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtocolConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtocolConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtocolConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtocolConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtocolConfigValidationError) ErrorName() string { return "ProtocolConfigValidationError" }

// Error satisfies the builtin error interface
func (e ProtocolConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtocolConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtocolConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtocolConfigValidationError{}

// Validate checks the field values on HTTPConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HTTPConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTPConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HTTPConfigMultiError, or
// nil if none found.
func (m *HTTPConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Method

	// no validation rules for Timeout

	// no validation rules for FollowRedirects

	// no validation rules for Headers

	// no validation rules for BodyFormat

	// no validation rules for Body

	// no validation rules for Proxy

	// no validation rules for ExpectedStatusCode

	// no validation rules for BodyAssertion

	if len(errors) > 0 {
		return HTTPConfigMultiError(errors)
	}

	return nil
}

// HTTPConfigMultiError is an error wrapping multiple validation errors
// returned by HTTPConfig.ValidateAll() if the designated constraints aren't met.
type HTTPConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPConfigMultiError) AllErrors() []error { return m }

// HTTPConfigValidationError is the validation error returned by
// HTTPConfig.Validate if the designated constraints aren't met.
type HTTPConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPConfigValidationError) ErrorName() string { return "HTTPConfigValidationError" }

// Error satisfies the builtin error interface
func (e HTTPConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPConfigValidationError{}

// Validate checks the field values on ICMPConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ICMPConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ICMPConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ICMPConfigMultiError, or
// nil if none found.
func (m *ICMPConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ICMPConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return ICMPConfigMultiError(errors)
	}

	return nil
}

// ICMPConfigMultiError is an error wrapping multiple validation errors
// returned by ICMPConfig.ValidateAll() if the designated constraints aren't met.
type ICMPConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ICMPConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ICMPConfigMultiError) AllErrors() []error { return m }

// ICMPConfigValidationError is the validation error returned by
// ICMPConfig.Validate if the designated constraints aren't met.
type ICMPConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ICMPConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ICMPConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ICMPConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ICMPConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ICMPConfigValidationError) ErrorName() string { return "ICMPConfigValidationError" }

// Error satisfies the builtin error interface
func (e ICMPConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sICMPConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ICMPConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ICMPConfigValidationError{}

// Validate checks the field values on PortConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PortConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PortConfigMultiError, or
// nil if none found.
func (m *PortConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PortConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Port

	if len(errors) > 0 {
		return PortConfigMultiError(errors)
	}

	return nil
}

// PortConfigMultiError is an error wrapping multiple validation errors
// returned by PortConfig.ValidateAll() if the designated constraints aren't met.
type PortConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortConfigMultiError) AllErrors() []error { return m }

// PortConfigValidationError is the validation error returned by
// PortConfig.Validate if the designated constraints aren't met.
type PortConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortConfigValidationError) ErrorName() string { return "PortConfigValidationError" }

// Error satisfies the builtin error interface
func (e PortConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortConfigValidationError{}

// Validate checks the field values on BrowserAutomationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BrowserAutomationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BrowserAutomationConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BrowserAutomationConfigMultiError, or nil if none found.
func (m *BrowserAutomationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *BrowserAutomationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Script

	if len(errors) > 0 {
		return BrowserAutomationConfigMultiError(errors)
	}

	return nil
}

// BrowserAutomationConfigMultiError is an error wrapping multiple validation
// errors returned by BrowserAutomationConfig.ValidateAll() if the designated
// constraints aren't met.
type BrowserAutomationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrowserAutomationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrowserAutomationConfigMultiError) AllErrors() []error { return m }

// BrowserAutomationConfigValidationError is the validation error returned by
// BrowserAutomationConfig.Validate if the designated constraints aren't met.
type BrowserAutomationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrowserAutomationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrowserAutomationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrowserAutomationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrowserAutomationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrowserAutomationConfigValidationError) ErrorName() string {
	return "BrowserAutomationConfigValidationError"
}

// Error satisfies the builtin error interface
func (e BrowserAutomationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrowserAutomationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrowserAutomationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrowserAutomationConfigValidationError{}

// Validate checks the field values on Overview with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Overview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Overview with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OverviewMultiError, or nil
// if none found.
func (m *Overview) ValidateAll() error {
	return m.validate(true)
}

func (m *Overview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uptime

	// no validation rules for UpFor

	// no validation rules for AvgResponseTime

	if len(errors) > 0 {
		return OverviewMultiError(errors)
	}

	return nil
}

// OverviewMultiError is an error wrapping multiple validation errors returned
// by Overview.ValidateAll() if the designated constraints aren't met.
type OverviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverviewMultiError) AllErrors() []error { return m }

// OverviewValidationError is the validation error returned by
// Overview.Validate if the designated constraints aren't met.
type OverviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverviewValidationError) ErrorName() string { return "OverviewValidationError" }

// Error satisfies the builtin error interface
func (e OverviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverviewValidationError{}
