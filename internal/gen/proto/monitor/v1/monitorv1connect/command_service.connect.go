// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/monitor/v1/command_service.proto

package monitorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taylow/awaik-backend/internal/gen/proto/monitor/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// MonitorCommandServiceName is the fully-qualified name of the MonitorCommandService service.
	MonitorCommandServiceName = "monitor.v1.MonitorCommandService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonitorCommandServiceCreateProcedure is the fully-qualified name of the MonitorCommandService's
	// Create RPC.
	MonitorCommandServiceCreateProcedure = "/monitor.v1.MonitorCommandService/Create"
	// MonitorCommandServiceUpdateProcedure is the fully-qualified name of the MonitorCommandService's
	// Update RPC.
	MonitorCommandServiceUpdateProcedure = "/monitor.v1.MonitorCommandService/Update"
	// MonitorCommandServiceDeleteProcedure is the fully-qualified name of the MonitorCommandService's
	// Delete RPC.
	MonitorCommandServiceDeleteProcedure = "/monitor.v1.MonitorCommandService/Delete"
	// MonitorCommandServicePauseProcedure is the fully-qualified name of the MonitorCommandService's
	// Pause RPC.
	MonitorCommandServicePauseProcedure = "/monitor.v1.MonitorCommandService/Pause"
	// MonitorCommandServiceResumeProcedure is the fully-qualified name of the MonitorCommandService's
	// Resume RPC.
	MonitorCommandServiceResumeProcedure = "/monitor.v1.MonitorCommandService/Resume"
)

// MonitorCommandServiceClient is a client for the monitor.v1.MonitorCommandService service.
type MonitorCommandServiceClient interface {
	// Create creates a new Monitor
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Update updates details of a monitor
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	// Delete deletes an existing monitor
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	// Pause pauses a running monitor
	Pause(context.Context, *connect.Request[v1.PauseRequest]) (*connect.Response[v1.PauseResponse], error)
	// Resume resumes a paused monitor
	Resume(context.Context, *connect.Request[v1.ResumeRequest]) (*connect.Response[v1.ResumeResponse], error)
}

// NewMonitorCommandServiceClient constructs a client for the monitor.v1.MonitorCommandService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonitorCommandServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonitorCommandServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &monitorCommandServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+MonitorCommandServiceCreateProcedure,
			opts...,
		),
		update: connect.NewClient[v1.UpdateRequest, v1.UpdateResponse](
			httpClient,
			baseURL+MonitorCommandServiceUpdateProcedure,
			opts...,
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+MonitorCommandServiceDeleteProcedure,
			opts...,
		),
		pause: connect.NewClient[v1.PauseRequest, v1.PauseResponse](
			httpClient,
			baseURL+MonitorCommandServicePauseProcedure,
			opts...,
		),
		resume: connect.NewClient[v1.ResumeRequest, v1.ResumeResponse](
			httpClient,
			baseURL+MonitorCommandServiceResumeProcedure,
			opts...,
		),
	}
}

// monitorCommandServiceClient implements MonitorCommandServiceClient.
type monitorCommandServiceClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	update *connect.Client[v1.UpdateRequest, v1.UpdateResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	pause  *connect.Client[v1.PauseRequest, v1.PauseResponse]
	resume *connect.Client[v1.ResumeRequest, v1.ResumeResponse]
}

// Create calls monitor.v1.MonitorCommandService.Create.
func (c *monitorCommandServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls monitor.v1.MonitorCommandService.Update.
func (c *monitorCommandServiceClient) Update(ctx context.Context, req *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls monitor.v1.MonitorCommandService.Delete.
func (c *monitorCommandServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Pause calls monitor.v1.MonitorCommandService.Pause.
func (c *monitorCommandServiceClient) Pause(ctx context.Context, req *connect.Request[v1.PauseRequest]) (*connect.Response[v1.PauseResponse], error) {
	return c.pause.CallUnary(ctx, req)
}

// Resume calls monitor.v1.MonitorCommandService.Resume.
func (c *monitorCommandServiceClient) Resume(ctx context.Context, req *connect.Request[v1.ResumeRequest]) (*connect.Response[v1.ResumeResponse], error) {
	return c.resume.CallUnary(ctx, req)
}

// MonitorCommandServiceHandler is an implementation of the monitor.v1.MonitorCommandService
// service.
type MonitorCommandServiceHandler interface {
	// Create creates a new Monitor
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	// Update updates details of a monitor
	Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error)
	// Delete deletes an existing monitor
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	// Pause pauses a running monitor
	Pause(context.Context, *connect.Request[v1.PauseRequest]) (*connect.Response[v1.PauseResponse], error)
	// Resume resumes a paused monitor
	Resume(context.Context, *connect.Request[v1.ResumeRequest]) (*connect.Response[v1.ResumeResponse], error)
}

// NewMonitorCommandServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonitorCommandServiceHandler(svc MonitorCommandServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monitorCommandServiceCreateHandler := connect.NewUnaryHandler(
		MonitorCommandServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	monitorCommandServiceUpdateHandler := connect.NewUnaryHandler(
		MonitorCommandServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	monitorCommandServiceDeleteHandler := connect.NewUnaryHandler(
		MonitorCommandServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	monitorCommandServicePauseHandler := connect.NewUnaryHandler(
		MonitorCommandServicePauseProcedure,
		svc.Pause,
		opts...,
	)
	monitorCommandServiceResumeHandler := connect.NewUnaryHandler(
		MonitorCommandServiceResumeProcedure,
		svc.Resume,
		opts...,
	)
	return "/monitor.v1.MonitorCommandService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonitorCommandServiceCreateProcedure:
			monitorCommandServiceCreateHandler.ServeHTTP(w, r)
		case MonitorCommandServiceUpdateProcedure:
			monitorCommandServiceUpdateHandler.ServeHTTP(w, r)
		case MonitorCommandServiceDeleteProcedure:
			monitorCommandServiceDeleteHandler.ServeHTTP(w, r)
		case MonitorCommandServicePauseProcedure:
			monitorCommandServicePauseHandler.ServeHTTP(w, r)
		case MonitorCommandServiceResumeProcedure:
			monitorCommandServiceResumeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonitorCommandServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonitorCommandServiceHandler struct{}

func (UnimplementedMonitorCommandServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("monitor.v1.MonitorCommandService.Create is not implemented"))
}

func (UnimplementedMonitorCommandServiceHandler) Update(context.Context, *connect.Request[v1.UpdateRequest]) (*connect.Response[v1.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("monitor.v1.MonitorCommandService.Update is not implemented"))
}

func (UnimplementedMonitorCommandServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("monitor.v1.MonitorCommandService.Delete is not implemented"))
}

func (UnimplementedMonitorCommandServiceHandler) Pause(context.Context, *connect.Request[v1.PauseRequest]) (*connect.Response[v1.PauseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("monitor.v1.MonitorCommandService.Pause is not implemented"))
}

func (UnimplementedMonitorCommandServiceHandler) Resume(context.Context, *connect.Request[v1.ResumeRequest]) (*connect.Response[v1.ResumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("monitor.v1.MonitorCommandService.Resume is not implemented"))
}
