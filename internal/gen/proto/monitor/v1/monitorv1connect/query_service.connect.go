// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/monitor/v1/query_service.proto

package monitorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/taylow/awaik-backend/internal/gen/proto/monitor/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// MonitorQueryServiceName is the fully-qualified name of the MonitorQueryService service.
	MonitorQueryServiceName = "monitor.v1.MonitorQueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonitorQueryServiceReadProcedure is the fully-qualified name of the MonitorQueryService's Read
	// RPC.
	MonitorQueryServiceReadProcedure = "/monitor.v1.MonitorQueryService/Read"
	// MonitorQueryServiceListByProjectProcedure is the fully-qualified name of the
	// MonitorQueryService's ListByProject RPC.
	MonitorQueryServiceListByProjectProcedure = "/monitor.v1.MonitorQueryService/ListByProject"
)

// MonitorQueryServiceClient is a client for the monitor.v1.MonitorQueryService service.
type MonitorQueryServiceClient interface {
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	ListByProject(context.Context, *connect.Request[v1.ListByProjectRequest]) (*connect.Response[v1.ListByProjectResponse], error)
}

// NewMonitorQueryServiceClient constructs a client for the monitor.v1.MonitorQueryService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonitorQueryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonitorQueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &monitorQueryServiceClient{
		read: connect.NewClient[v1.ReadRequest, v1.ReadResponse](
			httpClient,
			baseURL+MonitorQueryServiceReadProcedure,
			opts...,
		),
		listByProject: connect.NewClient[v1.ListByProjectRequest, v1.ListByProjectResponse](
			httpClient,
			baseURL+MonitorQueryServiceListByProjectProcedure,
			opts...,
		),
	}
}

// monitorQueryServiceClient implements MonitorQueryServiceClient.
type monitorQueryServiceClient struct {
	read          *connect.Client[v1.ReadRequest, v1.ReadResponse]
	listByProject *connect.Client[v1.ListByProjectRequest, v1.ListByProjectResponse]
}

// Read calls monitor.v1.MonitorQueryService.Read.
func (c *monitorQueryServiceClient) Read(ctx context.Context, req *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// ListByProject calls monitor.v1.MonitorQueryService.ListByProject.
func (c *monitorQueryServiceClient) ListByProject(ctx context.Context, req *connect.Request[v1.ListByProjectRequest]) (*connect.Response[v1.ListByProjectResponse], error) {
	return c.listByProject.CallUnary(ctx, req)
}

// MonitorQueryServiceHandler is an implementation of the monitor.v1.MonitorQueryService service.
type MonitorQueryServiceHandler interface {
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	ListByProject(context.Context, *connect.Request[v1.ListByProjectRequest]) (*connect.Response[v1.ListByProjectResponse], error)
}

// NewMonitorQueryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonitorQueryServiceHandler(svc MonitorQueryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monitorQueryServiceReadHandler := connect.NewUnaryHandler(
		MonitorQueryServiceReadProcedure,
		svc.Read,
		opts...,
	)
	monitorQueryServiceListByProjectHandler := connect.NewUnaryHandler(
		MonitorQueryServiceListByProjectProcedure,
		svc.ListByProject,
		opts...,
	)
	return "/monitor.v1.MonitorQueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonitorQueryServiceReadProcedure:
			monitorQueryServiceReadHandler.ServeHTTP(w, r)
		case MonitorQueryServiceListByProjectProcedure:
			monitorQueryServiceListByProjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonitorQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonitorQueryServiceHandler struct{}

func (UnimplementedMonitorQueryServiceHandler) Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("monitor.v1.MonitorQueryService.Read is not implemented"))
}

func (UnimplementedMonitorQueryServiceHandler) ListByProject(context.Context, *connect.Request[v1.ListByProjectRequest]) (*connect.Response[v1.ListByProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("monitor.v1.MonitorQueryService.ListByProject is not implemented"))
}
