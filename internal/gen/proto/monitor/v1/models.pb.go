// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/monitor/v1/models.proto

package monitorv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status is the current status of the monitor
type Status int32

const (
	Status_UnknownStatus Status = 0
	Status_Pending       Status = 1
	Status_Active        Status = 2
	Status_Paused        Status = 3
	Status_Deleted       Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UnknownStatus",
		1: "Pending",
		2: "Active",
		3: "Paused",
		4: "Deleted",
	}
	Status_value = map[string]int32{
		"UnknownStatus": 0,
		"Pending":       1,
		"Active":        2,
		"Paused":        3,
		"Deleted":       4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_monitor_v1_models_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_proto_monitor_v1_models_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{0}
}

// Protocol is the protocol used to monitor the service
type Protocol int32

const (
	Protocol_UnknownProtocol   Protocol = 0
	Protocol_HTTP              Protocol = 1
	Protocol_ICMP              Protocol = 2
	Protocol_Port              Protocol = 3
	Protocol_BrowserAutomation Protocol = 4
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "UnknownProtocol",
		1: "HTTP",
		2: "ICMP",
		3: "Port",
		4: "BrowserAutomation",
	}
	Protocol_value = map[string]int32{
		"UnknownProtocol":   0,
		"HTTP":              1,
		"ICMP":              2,
		"Port":              3,
		"BrowserAutomation": 4,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_monitor_v1_models_proto_enumTypes[1].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_proto_monitor_v1_models_proto_enumTypes[1]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{1}
}

// BodyFormat determines what format the Body field contains
type BodyFormat int32

const (
	BodyFormat_None BodyFormat = 0
	BodyFormat_Raw  BodyFormat = 1
	BodyFormat_JSON BodyFormat = 2
	BodyFormat_Form BodyFormat = 3
)

// Enum value maps for BodyFormat.
var (
	BodyFormat_name = map[int32]string{
		0: "None",
		1: "Raw",
		2: "JSON",
		3: "Form",
	}
	BodyFormat_value = map[string]int32{
		"None": 0,
		"Raw":  1,
		"JSON": 2,
		"Form": 3,
	}
)

func (x BodyFormat) Enum() *BodyFormat {
	p := new(BodyFormat)
	*p = x
	return p
}

func (x BodyFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_monitor_v1_models_proto_enumTypes[2].Descriptor()
}

func (BodyFormat) Type() protoreflect.EnumType {
	return &file_proto_monitor_v1_models_proto_enumTypes[2]
}

func (x BodyFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyFormat.Descriptor instead.
func (BodyFormat) EnumDescriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{2}
}

// Monitor holds information about a specific monitor
type Monitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the ID of the monitor
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ProjectId is the ID of the project the monitor belongs to
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Name is the friendly name of the monitor
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description is an optional description of the monitor
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Status is the current status of the monitor
	Status Status `protobuf:"varint,5,opt,name=status,proto3,enum=monitor.v1.Status" json:"status,omitempty"`
	// Interval is a duration string or cron expression for how often the monitor is run
	Interval string `protobuf:"bytes,6,opt,name=interval,proto3" json:"interval,omitempty"`
	// Regions is a list of regions that the monitor will run in
	Regions []string `protobuf:"bytes,7,rep,name=regions,proto3" json:"regions,omitempty"`
	// Protocol is the protocol used to monitor the service
	Protocol Protocol `protobuf:"varint,8,opt,name=protocol,proto3,enum=monitor.v1.Protocol" json:"protocol,omitempty"`
	// ProtocolConfig is the configuration for the protocol
	ProtocolConfig *ProtocolConfig `protobuf:"bytes,9,opt,name=protocol_config,json=protocolConfig,proto3" json:"protocol_config,omitempty"`
	// CreatedAt is the time the monitor was created
	CreatedAt string `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// UpdatedAt is the time the monitor was last updated
	UpdatedAt string `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// DeletedAt is the time the monitor was deleted
	DeletedAt string `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Monitor) Reset() {
	*x = Monitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_monitor_v1_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor) ProtoMessage() {}

func (x *Monitor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_monitor_v1_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor.ProtoReflect.Descriptor instead.
func (*Monitor) Descriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{0}
}

func (x *Monitor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Monitor) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Monitor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Monitor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Monitor) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *Monitor) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *Monitor) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *Monitor) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_UnknownProtocol
}

func (x *Monitor) GetProtocolConfig() *ProtocolConfig {
	if x != nil {
		return x.ProtocolConfig
	}
	return nil
}

func (x *Monitor) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Monitor) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Monitor) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

// ProtocolConfig wraps the different types of protocols that can be used to monitor a service
type ProtocolConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Protocol:
	//
	//	*ProtocolConfig_Http
	//	*ProtocolConfig_Icmp
	//	*ProtocolConfig_Port
	//	*ProtocolConfig_BrowserAutomation
	Protocol isProtocolConfig_Protocol `protobuf_oneof:"protocol"`
}

func (x *ProtocolConfig) Reset() {
	*x = ProtocolConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_monitor_v1_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolConfig) ProtoMessage() {}

func (x *ProtocolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_monitor_v1_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolConfig.ProtoReflect.Descriptor instead.
func (*ProtocolConfig) Descriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{1}
}

func (m *ProtocolConfig) GetProtocol() isProtocolConfig_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *ProtocolConfig) GetHttp() *HTTPConfig {
	if x, ok := x.GetProtocol().(*ProtocolConfig_Http); ok {
		return x.Http
	}
	return nil
}

func (x *ProtocolConfig) GetIcmp() *ICMPConfig {
	if x, ok := x.GetProtocol().(*ProtocolConfig_Icmp); ok {
		return x.Icmp
	}
	return nil
}

func (x *ProtocolConfig) GetPort() *PortConfig {
	if x, ok := x.GetProtocol().(*ProtocolConfig_Port); ok {
		return x.Port
	}
	return nil
}

func (x *ProtocolConfig) GetBrowserAutomation() *BrowserAutomationConfig {
	if x, ok := x.GetProtocol().(*ProtocolConfig_BrowserAutomation); ok {
		return x.BrowserAutomation
	}
	return nil
}

type isProtocolConfig_Protocol interface {
	isProtocolConfig_Protocol()
}

type ProtocolConfig_Http struct {
	Http *HTTPConfig `protobuf:"bytes,100,opt,name=http,proto3,oneof"`
}

type ProtocolConfig_Icmp struct {
	Icmp *ICMPConfig `protobuf:"bytes,101,opt,name=icmp,proto3,oneof"`
}

type ProtocolConfig_Port struct {
	Port *PortConfig `protobuf:"bytes,102,opt,name=port,proto3,oneof"`
}

type ProtocolConfig_BrowserAutomation struct {
	BrowserAutomation *BrowserAutomationConfig `protobuf:"bytes,103,opt,name=browser_automation,json=browserAutomation,proto3,oneof"`
}

func (*ProtocolConfig_Http) isProtocolConfig_Protocol() {}

func (*ProtocolConfig_Icmp) isProtocolConfig_Protocol() {}

func (*ProtocolConfig_Port) isProtocolConfig_Protocol() {}

func (*ProtocolConfig_BrowserAutomation) isProtocolConfig_Protocol() {}

// HTTPConfig contains configs for HTTP monitoring
// This monitor uses HTTP requests in order to monitor a service
type HTTPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address is the address of the HTTP server being monitored
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Method is the method used when making a HTTP request
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// Timeout is the duration of which the request will timeout
	Timeout string `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// FollowRedirects determines if the request should automatically follow redirects
	FollowRedirects bool `protobuf:"varint,4,opt,name=follow_redirects,json=followRedirects,proto3" json:"follow_redirects,omitempty"`
	// Headers is a list of headers to send with the request
	Headers map[string]string `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// BodyFormat determines what format the Body field contains
	BodyFormat BodyFormat `protobuf:"varint,6,opt,name=body_format,json=bodyFormat,proto3,enum=monitor.v1.BodyFormat" json:"body_format,omitempty"`
	// Body is what will be sent with the HTTP request
	Body string `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
	// Proxy is a URL-encoded proxy login string to proxy the request
	Proxy string `protobuf:"bytes,9,opt,name=proxy,proto3" json:"proxy,omitempty"`
	// ExpectedStatusCode is the status code that is expected from the request
	ExpectedStatusCode string `protobuf:"bytes,10,opt,name=expected_status_code,json=expectedStatusCode,proto3" json:"expected_status_code,omitempty"`
	// BodyAssertion is used to check if a response contains a specific value
	BodyAssertion string `protobuf:"bytes,11,opt,name=body_assertion,json=bodyAssertion,proto3" json:"body_assertion,omitempty"`
}

func (x *HTTPConfig) Reset() {
	*x = HTTPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_monitor_v1_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConfig) ProtoMessage() {}

func (x *HTTPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_monitor_v1_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConfig.ProtoReflect.Descriptor instead.
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{2}
}

func (x *HTTPConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HTTPConfig) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPConfig) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *HTTPConfig) GetFollowRedirects() bool {
	if x != nil {
		return x.FollowRedirects
	}
	return false
}

func (x *HTTPConfig) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HTTPConfig) GetBodyFormat() BodyFormat {
	if x != nil {
		return x.BodyFormat
	}
	return BodyFormat_None
}

func (x *HTTPConfig) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *HTTPConfig) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *HTTPConfig) GetExpectedStatusCode() string {
	if x != nil {
		return x.ExpectedStatusCode
	}
	return ""
}

func (x *HTTPConfig) GetBodyAssertion() string {
	if x != nil {
		return x.BodyAssertion
	}
	return ""
}

// ICMPConfig contains configs for ICMP monitoring
// This monitor uses ICMP pings in order to monitor services
type ICMPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Address is the service being pinged
}

func (x *ICMPConfig) Reset() {
	*x = ICMPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_monitor_v1_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICMPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICMPConfig) ProtoMessage() {}

func (x *ICMPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_monitor_v1_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICMPConfig.ProtoReflect.Descriptor instead.
func (*ICMPConfig) Descriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{3}
}

func (x *ICMPConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Port contains configs for Port monitoring
// This monitor monitors a specific port on a network
type PortConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Address is the service having it's port monitored
	Port    int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`      // Port is the port number being monitored
}

func (x *PortConfig) Reset() {
	*x = PortConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_monitor_v1_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfig) ProtoMessage() {}

func (x *PortConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_monitor_v1_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfig.ProtoReflect.Descriptor instead.
func (*PortConfig) Descriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{4}
}

func (x *PortConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PortConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// BrowserAutomation contains configs for BrowserAutomation monitoring
// This monitor uses browser automation in order to monitor a service
type BrowserAutomationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script string `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"` // Script is the browser automation code to be run when checking the service
}

func (x *BrowserAutomationConfig) Reset() {
	*x = BrowserAutomationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_monitor_v1_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowserAutomationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserAutomationConfig) ProtoMessage() {}

func (x *BrowserAutomationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_monitor_v1_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserAutomationConfig.ProtoReflect.Descriptor instead.
func (*BrowserAutomationConfig) Descriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{5}
}

func (x *BrowserAutomationConfig) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

// Overview provides an overview of a monitor
type Overview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uptime provides a uptime % for the given timeframe
	Uptime float32 `protobuf:"fixed32,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// UpFor is the duration the service has been up for the given timeframe
	UpFor string `protobuf:"bytes,2,opt,name=up_for,json=upFor,proto3" json:"up_for,omitempty"`
	// AverageResponseTime is the average latence in ms for the given timeframe
	AvgResponseTime int32 `protobuf:"varint,3,opt,name=avg_response_time,json=avgResponseTime,proto3" json:"avg_response_time,omitempty"`
}

func (x *Overview) Reset() {
	*x = Overview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_monitor_v1_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Overview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Overview) ProtoMessage() {}

func (x *Overview) ProtoReflect() protoreflect.Message {
	mi := &file_proto_monitor_v1_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Overview.ProtoReflect.Descriptor instead.
func (*Overview) Descriptor() ([]byte, []int) {
	return file_proto_monitor_v1_models_proto_rawDescGZIP(), []int{6}
}

func (x *Overview) GetUptime() float32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Overview) GetUpFor() string {
	if x != nil {
		return x.UpFor
	}
	return ""
}

func (x *Overview) GetAvgResponseTime() int32 {
	if x != nil {
		return x.AvgResponseTime
	}
	return 0
}

var File_proto_monitor_v1_models_proto protoreflect.FileDescriptor

var file_proto_monitor_v1_models_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xa4, 0x03, 0x0a, 0x07,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x43, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x63, 0x6d, 0x70, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x43, 0x4d, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x69, 0x63, 0x6d,
	0x70, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x54, 0x0a, 0x12, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x11, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0xba, 0x03, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26,
	0x0a, 0x0a, 0x49, 0x43, 0x4d, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x31, 0x0a, 0x17, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x65, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x70, 0x5f,
	0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x70, 0x46, 0x6f, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x76, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x4d, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x54, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x04, 0x2a, 0x33, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x61, 0x77,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x6f, 0x72, 0x6d, 0x10, 0x03, 0x42, 0xaf, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x79, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x77, 0x61, 0x69,
	0x6b, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x16, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_monitor_v1_models_proto_rawDescOnce sync.Once
	file_proto_monitor_v1_models_proto_rawDescData = file_proto_monitor_v1_models_proto_rawDesc
)

func file_proto_monitor_v1_models_proto_rawDescGZIP() []byte {
	file_proto_monitor_v1_models_proto_rawDescOnce.Do(func() {
		file_proto_monitor_v1_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_monitor_v1_models_proto_rawDescData)
	})
	return file_proto_monitor_v1_models_proto_rawDescData
}

var file_proto_monitor_v1_models_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_monitor_v1_models_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_monitor_v1_models_proto_goTypes = []interface{}{
	(Status)(0),                     // 0: monitor.v1.Status
	(Protocol)(0),                   // 1: monitor.v1.Protocol
	(BodyFormat)(0),                 // 2: monitor.v1.BodyFormat
	(*Monitor)(nil),                 // 3: monitor.v1.Monitor
	(*ProtocolConfig)(nil),          // 4: monitor.v1.ProtocolConfig
	(*HTTPConfig)(nil),              // 5: monitor.v1.HTTPConfig
	(*ICMPConfig)(nil),              // 6: monitor.v1.ICMPConfig
	(*PortConfig)(nil),              // 7: monitor.v1.PortConfig
	(*BrowserAutomationConfig)(nil), // 8: monitor.v1.BrowserAutomationConfig
	(*Overview)(nil),                // 9: monitor.v1.Overview
	nil,                             // 10: monitor.v1.HTTPConfig.HeadersEntry
}
var file_proto_monitor_v1_models_proto_depIdxs = []int32{
	0,  // 0: monitor.v1.Monitor.status:type_name -> monitor.v1.Status
	1,  // 1: monitor.v1.Monitor.protocol:type_name -> monitor.v1.Protocol
	4,  // 2: monitor.v1.Monitor.protocol_config:type_name -> monitor.v1.ProtocolConfig
	5,  // 3: monitor.v1.ProtocolConfig.http:type_name -> monitor.v1.HTTPConfig
	6,  // 4: monitor.v1.ProtocolConfig.icmp:type_name -> monitor.v1.ICMPConfig
	7,  // 5: monitor.v1.ProtocolConfig.port:type_name -> monitor.v1.PortConfig
	8,  // 6: monitor.v1.ProtocolConfig.browser_automation:type_name -> monitor.v1.BrowserAutomationConfig
	10, // 7: monitor.v1.HTTPConfig.headers:type_name -> monitor.v1.HTTPConfig.HeadersEntry
	2,  // 8: monitor.v1.HTTPConfig.body_format:type_name -> monitor.v1.BodyFormat
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_monitor_v1_models_proto_init() }
func file_proto_monitor_v1_models_proto_init() {
	if File_proto_monitor_v1_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_monitor_v1_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_monitor_v1_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_monitor_v1_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_monitor_v1_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICMPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_monitor_v1_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_monitor_v1_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowserAutomationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_monitor_v1_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Overview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_monitor_v1_models_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ProtocolConfig_Http)(nil),
		(*ProtocolConfig_Icmp)(nil),
		(*ProtocolConfig_Port)(nil),
		(*ProtocolConfig_BrowserAutomation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_monitor_v1_models_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_monitor_v1_models_proto_goTypes,
		DependencyIndexes: file_proto_monitor_v1_models_proto_depIdxs,
		EnumInfos:         file_proto_monitor_v1_models_proto_enumTypes,
		MessageInfos:      file_proto_monitor_v1_models_proto_msgTypes,
	}.Build()
	File_proto_monitor_v1_models_proto = out.File
	file_proto_monitor_v1_models_proto_rawDesc = nil
	file_proto_monitor_v1_models_proto_goTypes = nil
	file_proto_monitor_v1_models_proto_depIdxs = nil
}
